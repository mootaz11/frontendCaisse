[{"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\index.js":"1","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\reportWebVitals.js":"2","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\App.js":"3","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\Cart\\Cart.js":"4","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\cart\\Cart.js":"5","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\common\\header\\Header.js":"6","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\common\\footer\\Footer.js":"7","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\products\\Products.js":"8","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\commandes\\Commandes.js":"9"},{"size":235,"mtime":1610093482187,"results":"10","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"11"},{"size":782,"mtime":1610130766677,"results":"13","hashOfConfig":"11"},{"size":132,"mtime":1610047931906,"results":"14","hashOfConfig":"11"},{"size":3485,"mtime":1610108348450,"results":"15","hashOfConfig":"11"},{"size":1534,"mtime":1610130818108,"results":"16","hashOfConfig":"11"},{"size":2974,"mtime":1610102055610,"results":"17","hashOfConfig":"11"},{"size":5326,"mtime":1610107107997,"results":"18","hashOfConfig":"11"},{"size":2533,"mtime":1610132334011,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1o8k5xz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\index.js",[],["42","43"],"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\reportWebVitals.js",[],["44","45"],"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\App.js",[],"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\Cart\\Cart.js",[],"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\cart\\Cart.js",["46"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport classes from '../cart/cart.module.css';\r\nimport cart from '../assets/img/sprite.png'\r\nimport { Button } from 'reactstrap';\r\nconst TAX_RATE = 0.07;\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 700,\r\n  },\r\n});\r\n\r\nfunction ccyFormat(num) {\r\n  return `${num.toFixed(2)}`;\r\n}\r\n\r\nfunction priceRow(qty, unit) {\r\n  return qty * unit;\r\n}\r\n\r\nfunction createRow(desc, qty, unit) {\r\n  const price = priceRow(qty, unit);\r\n  return { desc, qty, unit, price };\r\n}\r\n\r\nfunction subtotal(items) {\r\n  return items.map(({ price }) => price).reduce((sum, i) => sum + i, 0);\r\n}\r\n\r\nconst rows = [\r\n  createRow('Paperclips (Box)', 100, 1.15),\r\n  createRow('Paper (Case)', 10, 45.99),\r\n  createRow('Waste Basket', 2, 17.99),\r\n];\r\n\r\nconst invoiceSubtotal = subtotal(rows);\r\nconst invoiceTaxes = TAX_RATE * invoiceSubtotal;\r\nconst invoiceTotal = invoiceTaxes + invoiceSubtotal;\r\n\r\nexport default function SpanningTable() {\r\n  const tableClasses = useStyles();\r\n\r\n  return (\r\n      <div className={classes.cart}>\r\n          <div className={classes.products}>\r\n            <img src={cart}/>\r\n            <h1 className={classes.h1}>voila votre caddie</h1>\r\n          </div>\r\n      <div className={classes.order}>\r\n    <TableContainer component={Paper}>\r\n      <Table className={tableClasses.table} aria-label=\"spanning table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell align=\"center\" colSpan={3}>\r\n              Details\r\n            </TableCell>\r\n            <TableCell align=\"right\">Price</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Desc</TableCell>\r\n            <TableCell align=\"right\">Qty.</TableCell>\r\n            <TableCell align=\"right\">Unit</TableCell>\r\n            <TableCell align=\"right\">Sum</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.desc}>\r\n              <TableCell>{row.desc}</TableCell>\r\n              <TableCell align=\"right\">{row.qty}</TableCell>\r\n              <TableCell align=\"right\">{row.unit}</TableCell>\r\n              <TableCell align=\"right\">{ccyFormat(row.price)}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n\r\n          <TableRow>\r\n            <TableCell rowSpan={3} />\r\n            <TableCell colSpan={2}>Subtotal</TableCell>\r\n            <TableCell align=\"right\">{ccyFormat(invoiceSubtotal)}</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell>Tax</TableCell>\r\n            <TableCell align=\"right\">{`${(TAX_RATE * 100).toFixed(0)} %`}</TableCell>\r\n            <TableCell align=\"right\">{ccyFormat(invoiceTaxes)}</TableCell>\r\n          </TableRow>\r\n          <TableRow>\r\n            <TableCell colSpan={2}>Total</TableCell>\r\n            <TableCell align=\"right\">{ccyFormat(invoiceTotal)}</TableCell>\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    <Button className={classes.button} color=\"primary\">passer la commande</Button>{' '}\r\n\r\n    </div>\r\n   \r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\common\\header\\Header.js",[],"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\common\\footer\\Footer.js",[],"C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\products\\Products.js",["47","48","49"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Container, Row, Col, CardText, CardTitle, CardSubtitle, Button, CardImg, CardBody, Card, Modal, Label } from 'reactstrap'\r\nimport classes from './products.module.css';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport {Input} from '@material-ui/core';\r\nimport Veg1 from '../assets/img/veg1.jpg';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    fab: {\r\n        margin: theme.spacing(2),\r\n    },\r\n\r\n    absolute: {\r\n        position: 'fixed',\r\n        bottom: 10,\r\n        right: 10,\r\n\r\n    },\r\n}));\r\n\r\n\r\nexport default function Products() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [offre,setOffreChecked]=React.useState(false);\r\n    const [remise,setRemise]=React.useState(false);\r\n    const [product,setProduct]=React.useState({name:\"\",price:0,quantity:1,remise:false,offre:false})\r\n    const [imageProduct,setImageProduct]=React.useState();\r\n    const FabClasses = useStyles();\r\n    const handleClose = () => { }\r\n    const addProductHandler=()=>{\r\n        console.log(product);\r\n    }\r\n    return (\r\n        <Container fluid className={classes.mainContainer}>\r\n\r\n            <Row>\r\n                <Col md=\"12\" lg=\"12\" className={classes.headerContainer}>\r\n                    <text className={classes.headerTitle}>Our Products</text>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                {[1, 2, 3, 4, 5].map((value, index) =>\r\n                    <Col lg=\"3\" md=\"4\" key={index}>\r\n                        <Card className={classes.cardProduct}>\r\n                        <CardImg  top width={\"100%\"} height={150} src={Veg1}  alt=\"Veg1\"/>\r\n                            <CardBody>\r\n                                <CardTitle tag=\"h5\">carrotes</CardTitle>\r\n                                <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">50â‚¬</CardSubtitle>\r\n                                <Button color={\"primary\"} >Add To Cart</Button>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                )}\r\n            </Row>\r\n            <Modal\r\n                isOpen={open}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"simple-modal-title\"\r\n                aria-describedby=\"simple-modal-description\"\r\n            >\r\n                <div className={classes.modalBody}>\r\n                    <div className={classes.titleBody}>\r\n                        <h1>add Product</h1>\r\n\r\n\r\n                    </div>\r\n                    <div className={classes.addProductBody}>\r\n                            <Label for=\"exampleFile\" style={{ fontSize: 22 }}>product name: </Label>\r\n                            <Input className={classes.input} value={product.name} onChange={(evt)=>{setProduct({...product,name:evt.target.value})}} />\r\n                            <Label for=\"exampleFile\" style={{ fontSize: 22 }}>product quantity: </Label>\r\n                            <Input className={classes.input} value={product.quantity} onChange={(evt)=>{setProduct({...product,quantity:evt.target.value})}} />\r\n                            <Label for=\"exampleFile\" style={{ fontSize: 22 }}>product price:</Label>\r\n                            <Input className={classes.input} value={product.price} onChange={(evt)=>{setProduct({...product,price:evt.target.value})}} />\r\n                            <Label for=\"exampleFile\" style={{ fontSize: 22 }}>product Image : </Label>\r\n                            <Input type=\"file\" name=\"file\" id=\"exampleFile\" />\r\n                        <div className={classes.check}>\r\n                            <Label style={{ fontSize: 22 }}>Remise 50%</Label>\r\n                            <Checkbox\r\n                                checked={remise}\r\n                                onChange={() => { setRemise(!remise); setProduct({...product,remise:!remise}) }}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                            />\r\n                            <Label style={{ fontSize: 22 }} >offre</Label>\r\n                            <Checkbox\r\n                                checked={offre}\r\n                                onChange={() => {setOffreChecked(!offre) ;setProduct({...product,offre:!offre}) }}\r\n                                inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className={classes.addProductFooter}>\r\n                        <Button className={classes.button} color=\"primary\" onClick={()=>{addProductHandler()}}>Add Product</Button>{' '}\r\n                        <Button className={classes.button} color=\"danger\" onClick={() => { setOpen(!open) }}>Close</Button>{' '}\r\n\r\n\r\n                    </div>\r\n                </div>\r\n            </Modal>\r\n            <Tooltip title=\"Add\" aria-label=\"add\">\r\n                <Fab onClick={() => { console.log(open); setOpen(!open) }} color=\"primary\" className={FabClasses.absolute}>\r\n                    <AddIcon />\r\n                </Fab>\r\n            </Tooltip>\r\n\r\n        </Container>\r\n\r\n    )\r\n}\r\n","C:\\Users\\Pc\\Desktop\\challenge\\caisse_app\\src\\commandes\\Commandes.js",["50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":53,"column":13,"nodeType":"59","endLine":53,"endColumn":30},{"ruleId":"60","severity":1,"message":"61","line":3,"column":31,"nodeType":"62","messageId":"63","endLine":3,"endColumn":39},{"ruleId":"60","severity":1,"message":"64","line":33,"column":12,"nodeType":"62","messageId":"63","endLine":33,"endColumn":24},{"ruleId":"60","severity":1,"message":"65","line":33,"column":25,"nodeType":"62","messageId":"63","endLine":33,"endColumn":40},{"ruleId":"60","severity":1,"message":"66","line":19,"column":10,"nodeType":"62","messageId":"63","endLine":19,"endColumn":20},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],["67"],["68"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'CardText' is defined but never used.","Identifier","unusedVar","'imageProduct' is assigned a value but never used.","'setImageProduct' is assigned a value but never used.","'createData' is defined but never used.","no-global-assign","no-unsafe-negation"]